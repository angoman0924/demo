package com.zacx.gateway.passenger.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import com.github.pagehelper.PageInfo;
import com.zacx.core.annotation.MethodFlag;
import com.zacx.core.enums.Code;
import com.zacx.core.model.api.ClientInfo;
import com.zacx.core.util.BeanUtils;
import com.zacx.gateway.base.base.PageResult;
import com.zacx.gateway.base.base.Result;
import com.zacx.gateway.passenger.constants.PassengerApiUrl;
import com.zacx.gateway.passenger.dto.LinesResult;
import com.zacx.gateway.passenger.dto.PlanResult;
import com.zacx.gateway.passenger.dto.SiteInfoByCityCodeQueryCondition;
import com.zacx.gateway.passenger.dto.SiteResult;
import com.zacx.serivce.line.api.LineServiceApi;
import com.zacx.serivce.line.api.SiteServiceApi;
import com.zacx.serivce.line.api.dto.LineDTO;
import com.zacx.serivce.line.api.dto.PlanDTO;
import com.zacx.serivce.line.api.dto.SiteDTO;
import com.zacx.serivce.line.api.dto.SiteInfoByCityCodeQueryConditionDTO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;


/**
 * @author gulx
 * @Description 功能接口
 * @Date 2018/9/27 19:37
 * @Param
 * @copyright 上海拜米网络科技有限公司
 * @return
 **/
@Api(description = "路线模块")
@RestController
@RequestMapping(PassengerApiUrl.V1)
public class LineController {

    @Autowired
    private SiteServiceApi siteServiceApi;
    @Autowired
    private LineServiceApi lineServiceApi;

    //region Demo
    @MethodFlag
    @ApiOperation(value = "搜索路线")
    @GetMapping(PassengerApiUrl.LINE_SEARCH)
    public Result<LinesResult> search(
            ClientInfo clientInfo,
            @ApiParam("起始城市ID") @RequestParam("startCityId") int startCityId,
            @ApiParam("终点城市ID") @RequestParam("endCityId") int endCityId,
            @ApiParam(value = "出发日期格式(2018/09/30)", example = "2018/09/30") @RequestParam("departureDate") Date departureDate
    ) {
        //缺少代码
        LinesResult result = new LinesResult();
        return Result.success(result);
    }
    //endregion


    //region 获取相关城市的站点信息
    @MethodFlag
    @ApiOperation(value = "获取相关城市的站点信息")
    @PostMapping(value = PassengerApiUrl.LINE_SITE_INFO_BY_CITY_CODE)
    @ResponseBody
    public Result<Map<String, List<SiteResult>>> getSiteInfosByCityCode(
            ClientInfo clientInfo,
            @ApiParam(value = "城市列表", required = true) @RequestBody List<SiteInfoByCityCodeQueryCondition> params
    ) {
        if (null == params || params.isEmpty()) {
            return Result.error(Code.getByCode(Code.ERROR_ARGUMENT.getDescription()), Code.ERROR_ARGUMENT.getDescription());
        }

        SiteInfoByCityCodeQueryConditionDTO dto = new SiteInfoByCityCodeQueryConditionDTO();
        Map<String, Integer> map = new HashMap<>();
        params.forEach(c -> {
            map.put(c.getCityCode(), c.getLevel());
        });
        dto.setCodeLeverMap(map);

        Map<String, List<SiteResult>> resultData = new HashMap<>();
        Map<String, List<SiteDTO>> cityMap = siteServiceApi.getSiteInfosByCityCode(dto);
        if (null != cityMap && !cityMap.isEmpty()) {
            String rs = JSON.toJSONString(cityMap);
            resultData = JSON.parseObject(rs, new TypeReference<HashMap<String, List<SiteResult>>>() {
            });
            return Result.success(resultData);
        } else {
            return Result.error(Code.getByCode(Code.ERROR_DATA_NOT_FOUND.getDescription()), Code.ERROR_DATA_NOT_FOUND.getDescription());
        }
    }
    //endregion

    //region 113 查询起始地与目的地（班次列表）
    @MethodFlag
    @ApiOperation(value = "根据线路id查班次")
    @PostMapping(value = PassengerApiUrl.LINE_PLAN_INFO_BY_LINE)
    public Result<PageResult<LinesResult>> getPlanInfoByLineId(ClientInfo clientInfo,
                                                               @ApiParam(value = "线路id", required = true) @RequestBody Integer lineId
    ) {
        if (BeanUtils.isNull(lineId)) {
            return Result.error(Code.getByCode(Code.ERROR_ARGUMENT.getDescription()), Code.ERROR_ARGUMENT.getDescription());
        }

        LineDTO dto=new LineDTO();
        dto.setId(lineId);
        PageInfo<PlanDTO> pageInfo = lineServiceApi.getPlanInfoByLine(dto);
        if(!BeanUtils.isNull(pageInfo)&&!BeanUtils.isNull(pageInfo.getList())&&pageInfo.getList().size()>0){
            String s = JSON.toJSONString(pageInfo.getList());
            List<PlanResult> list=JSON.parseArray(s,PlanResult.class);
            return Result.success(new PageResult((int)pageInfo.getTotal(),pageInfo.getPageNum(),pageInfo.getPageSize(),list));
        }else{
            return Result.success(PageResult.emptyResult());
        }
    }
    //endregion
}
