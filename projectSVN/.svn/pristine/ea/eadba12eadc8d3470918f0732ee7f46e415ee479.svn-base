package com.zacx.gateway.passenger.controller;

import com.github.pagehelper.PageInfo;
import com.google.common.base.Strings;
import com.zacx.core.annotation.MethodFlag;
import com.zacx.core.enums.Code;
import com.zacx.core.enums.PlatformEnum;
import com.zacx.core.util.ObjectUtils;
import com.zacx.gateway.base.base.ClientInfo;
import com.zacx.gateway.base.base.PageResult;
import com.zacx.gateway.base.base.Result;
import com.zacx.gateway.base.util.WebUtils;
import com.zacx.gateway.passenger.constants.PassengerApiUrl;
import com.zacx.gateway.passenger.dto.user.*;
import com.zacx.serivce.basic.api.ChitServiceApi;
import com.zacx.serivce.user.api.UserServiceApi;
import com.zacx.serivce.user.api.dto.*;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.BeanUtils;
import org.springframework.web.bind.annotation.*;
import springfox.documentation.annotations.ApiIgnore;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import java.util.List;

/**
 * 用户相关接口
 *
 * @author gulx
 * @version 1.0
 * @create 2018-09-17 20:31
 * @copyright 上海拜米网络科技有限公司
 **/
@Api(description = "用户模块")
@RestController
@RequestMapping(PassengerApiUrl.USER)
public class UserController {
    @Resource
    private ChitServiceApi chitServiceApi;
    @Resource
    private UserServiceApi userServiceApi;

    @MethodFlag
    @ApiOperation(value = "用户登陆/注册")
    @PostMapping(PassengerApiUrl.LOGIN)
    public Result<LoginResult> login(LoginEnter enter){
        LoginInfoDTO loginInfoDTO = ObjectUtils.copyBean(enter, LoginInfoDTO.class);
        loginInfoDTO.setPlatform(PlatformEnum.PASSENGER);
        SessionUser sessionUser = userServiceApi.login(loginInfoDTO);
        return Result.success(ObjectUtils.copyBean(sessionUser, LoginResult.class));
    }

    @MethodFlag
    @ApiOperation(value = "发送验证码")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "mobile", value = "手机号码", paramType = "query", required = true)
    })
    @GetMapping("sendSmsCode")
    public Result<Boolean> sendSmsCode(HttpServletRequest request, String mobile) {
        if (Strings.isNullOrEmpty(mobile) || mobile.length() < 11) {
            return Result.error(Code.ERROR_ARGUMENT,"手机号码格式错误");
        }
        String ip = WebUtils.getClientIpAddr(request);
        ip = Strings.isNullOrEmpty(ip) ? "": ip;
        chitServiceApi.sendSmsCode(mobile, ip);
        return Result.success(true);
    }

    /**
     * 实名认证
     */
    @MethodFlag
    @ApiOperation(value = "实名认证")
    @PostMapping(value = "realName")
    public Result<Boolean> realName(RealNameEnter enter) {
        RealNameDTO realNameDTO = new RealNameDTO();
        BeanUtils.copyProperties(enter, realNameDTO);
        if (!userServiceApi.realName(realNameDTO)) {
            return Result.error(Code.ERROR_DB_OPERATE, "认证失败");
        }
        return Result.success();
    }

    /**
     * 优惠券列表
     */
    @MethodFlag
    @ApiOperation(value = "优惠券列表")
    @ApiImplicitParams({
            @ApiImplicitParam(value = "用户ID", required = true, paramType = "query")
    })
    @GetMapping(value = "couponList")
    public Result<List<UserCouponResult>> couponList(@ApiIgnore Integer userId) {
        UserCouponDTO dto = new UserCouponDTO();
        dto.setUserId(userId);
        List<UserCouponResult> list = ObjectUtils.ListEntity2ListDTO(userServiceApi.getCouponList(dto), UserCouponResult.class);
        return Result.success(list);
    }

    @ApiOperation(value = "根据手机号码查询用户")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "mobile", value = "手机号", required = true, paramType = "query", dataType = "string")
    })
    @GetMapping("getUserByMobile")
    public Result<UserDTO> selectUserByMobile(@ApiIgnore String mobile){
        UserDTO result = userServiceApi.selectUserByMobile(mobile);
        return Result.success(result);
    }

    @MethodFlag
    @ApiOperation(value = "根据用户ID查询用户详细信息")
    @ApiImplicitParams({
            @ApiImplicitParam(name = "id", value = "用户ID", required = true, paramType = "query", dataType = "string")
    })
    @GetMapping("getUserById")
    public Result<UserDetailDTO> selectUserBykey(@ApiIgnore Integer id){
        if(id == null || id == 0){
            return Result.error(Code.ERROR_ARGUMENT,"用户ID不能为空");
        }
        UserDetailDTO userDetailDTO = userServiceApi.selectUserDetailById(id);
        if(userDetailDTO == null){
            return Result.error(Code.ERROR_DATA_NOT_FOUND,"没有找到相关信息");
        }
        return Result.success(userDetailDTO);
    }

    @MethodFlag
    @ApiOperation(value = "一键报警")
    @ApiImplicitParams({
        @ApiImplicitParam(name = "describe", value = "描述信息", paramType = "query")
    })
    @GetMapping("callAlarm")
    public Result<Boolean> callAlarm(ClientInfo clientInfo, String describe) {
        if (clientInfo.getUserId() == null) {
            Result.error(Code.ERROR_ARGUMENT, "用户ID不能为空");
        }
        AlarmDTO alarmDTO = new AlarmDTO();
        BeanUtils.copyProperties(clientInfo, alarmDTO);
        alarmDTO.setPlatform(PlatformEnum.PASSENGER);
        alarmDTO.setDescribe(describe);
        if (clientInfo.getLng() != null && clientInfo.getLat() != null) {
            alarmDTO.setCoordinate(clientInfo.getLng() + "," + clientInfo.getLat());
        }
        if (userServiceApi.addAlarm(alarmDTO) == 0) {
            Result.error(Code.ERROR_DB_OPERATE, "报警失败");
        }
        return Result.success(true);
    }

    @MethodFlag
    @ApiOperation(value = "申请提现")
    @PostMapping("applyCashWithdraw")
    public Result<Boolean> applyCashWithdraw(ApplyCashWithdrawEnter enter) {
        UserCashWithdrawApplyDTO dto = new UserCashWithdrawApplyDTO();
        dto.setUserId(enter.getUserId());
        dto.setUserType(0);
        dto.setToBankAccountId(enter.getToAccountId());
        dto.setMoney(enter.getMoney());
        if (userServiceApi.addCashWithdraw(dto) == 0) {
            return Result.error(Code.ERROR_DB_OPERATE, "新增提现申请失败");
        }
        return Result.success(true);
    }

    @MethodFlag
    @ApiOperation("查询提现申请记录")
    @PostMapping("getCashWithdrawList")
    public Result<List<GetCashWithdrawListResult>> getCashWithdrawList(GetCashWithdrawListEnter enter) {
        UserCashWithdrawApplyDTO dto = new UserCashWithdrawApplyDTO();
        BeanUtils.copyProperties(enter, dto);
        List<UserCashWithdrawApplyDTO> dtoList = userServiceApi.getCashWithdrawList(dto);
        List<GetCashWithdrawListResult> results = ObjectUtils.ListEntity2ListDTO(dtoList, GetCashWithdrawListResult.class);
        return Result.success(results);
    }

    @MethodFlag
    @ApiOperation("获取充值记录")
    public Result<PageResult<ChargeRecordResult>> getChargeRecordList(ChargeRecordEnter enter) {
        UserBankWaterBillsDTO dto = new UserBankWaterBillsDTO();
        dto.setUserId(enter.getUserId());
        dto.setPageIndex(enter.getStartIndex());
        dto.setPageSize(enter.getPageSize());
        PageInfo<UserBankWaterBillsDTO> dtoPageInfo = userServiceApi.getChargeRecordPageInfo(dto);
        List<ChargeRecordResult> resultList = ObjectUtils.listEntityConvert2ListDTO(dtoPageInfo.getList(), ChargeRecordResult.class);
//        PageResult pageResult = new PageResult(dtoPageInfo.getTotal(), dtoPageInfo.getPageNum(), dtoPageInfo.getPageSize(), resultList);
//        return ObjectUtils.pageEntityConvert2PageDTO(dtoPageInfo, ChargeRecordResult.class);
        return null;
    }

    @MethodFlag
    @ApiOperation(value = "参数测试")
    @GetMapping("parameter")
    public Result<ClientInfo> parameter(ClientInfo clientInfo){
        return Result.success(clientInfo);
    }

    @MethodFlag
    @ApiOperation(value = "参数测试1")
    @GetMapping("parameter1")
    public Result<String> parameter1(ClientInfo clientInfo,@RequestParam("id") int id){

        return Result.success(clientInfo+"id="+id);
    }
}
