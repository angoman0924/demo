package com.zacx.serivce.line.api.impl;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageInfo;
import com.zacx.core.enums.SchedulingStatus;
import com.zacx.core.util.DateUtils;
import com.zacx.core.util.ObjectUtils;
import com.zacx.serivce.dal.entity.LScheduling;
import com.zacx.serivce.dal.entity.LSchedulingMoveApply;
import com.zacx.serivce.line.api.SchedulingServiceApi;
import com.zacx.serivce.line.api.dto.SchedulingDTO;
import com.zacx.serivce.line.api.dto.SchedulingMoveApplyDTO;
import com.zacx.serivce.line.api.exceptions.LineServiceException;
import com.zacx.serivce.line.service.SchedulingMoveApplySerivce;
import com.zacx.serivce.line.service.SchedulingService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

/**
 * 班次调度api服务
 * Created by song on 2018/10/5.
 */
@Service
public class SchedulingServiceApiImpl implements SchedulingServiceApi {
    Logger logger= LoggerFactory.getLogger(SchedulingServiceApiImpl.class);
    @Autowired
    private SchedulingService schedulingService;
    @Autowired
    private SchedulingMoveApplySerivce schedulingMoveApplySerivce;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int insert(SchedulingDTO dto) throws LineServiceException {
        logger.info("SchedulingServiceApi.insert,params:{}", JSON.toJSONString(dto));
        LScheduling record=new LScheduling();
        BeanUtils.copyProperties(dto,record);
        int r = schedulingService.insert(record);
        logger.info("r={}",r);
        return r;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int update(SchedulingDTO dto) throws LineServiceException {
        logger.info("SchedulingServiceApi.update,params:{}", JSON.toJSONString(dto));
        LScheduling record=new LScheduling();
        BeanUtils.copyProperties(dto,record);
        int r = schedulingService.update(record);
        logger.info("r={}",r);
        return r;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int removeListByIds(List<Integer> ids, String userCode) throws LineServiceException {
        logger.info("SchedulingServiceApi.removeListByIds,params:{}", JSON.toJSONString(ids));
        int r = schedulingService.removeListByIds(ids,userCode);
        logger.info("r={}",r);
        return r;
    }

    @Override
    public PageInfo<SchedulingDTO> getSchedulingPageInfo(SchedulingDTO dto) {
        logger.info("SchedulingServiceApi.getSchedulingPageInfo,params:{}",JSON.toJSONString(dto));

        PageInfo<LScheduling> pageInfo = schedulingService.getSchedulingPageInfo(dto);
        logger.info("pageInfo_result:{}",JSON.toJSONString(pageInfo));

        PageInfo<SchedulingDTO> page= ObjectUtils.pageEntityConvert2PageDTO(pageInfo,SchedulingDTO.class);
        logger.info("page_result:{}",JSON.toJSONString(page));


        return page;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int schedulingMoveApply(SchedulingMoveApplyDTO dto) throws LineServiceException {
        logger.info("SchedulingServiceApi.schedulingMoveApply,params:{}", JSON.toJSONString(dto));
        LSchedulingMoveApply record=new LSchedulingMoveApply();
        BeanUtils.copyProperties(dto,record);
        int r = schedulingMoveApplySerivce.insert(record);
        if(r==1){
            LScheduling byPrimaryKey = schedulingService.findByPrimaryKey(dto.getSchedulingId());
            if(null!=byPrimaryKey){
                LScheduling lScheduling=new LScheduling();
                lScheduling.setId(dto.getSchedulingId());
                lScheduling.setStatus(SchedulingStatus.MOVE_APPLYING.getValue());
                lScheduling.setModifyAt(new Date());
                lScheduling.setModifyBy(dto.getCreateBy());
                int update = schedulingService.update(lScheduling);
                if(update==1){
                    return update;
                }else{
                    throw new LineServiceException("原排版信息更新失败");
                }
            }else{
                throw new LineServiceException("原排版信息不存在");
            }
        }else{
            throw new LineServiceException("调班申请写入失败");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int driverSign(SchedulingDTO dto) throws LineServiceException {
        logger.info("SchedulingServiceApi.driverSign,params:{}",JSON.toJSONString(dto));
        //1.获取当前班次的信息
        LScheduling byPrimaryKey = schedulingService.findByPrimaryKey(dto.getId());
        if(ObjectUtils.isNull(byPrimaryKey)){
            throw new LineServiceException("当前排班信息不存在");
        }
        //2.判断当前状态是否是待签到
        if(byPrimaryKey.getStatus()!=SchedulingStatus.WAITING.getValue()){
            throw new LineServiceException("当前状态不支持签到");
        }
        //3.检验当前班次开车时间是否在签到前规定时间外 默认半小时
        if(byPrimaryKey.getStartTime().compareTo(new Date())>0
                && DateUtils.getMinutes(new Date(),byPrimaryKey.getStartTime())<=Long.valueOf(30)){
            return this.update(dto);
        }else{
            throw new LineServiceException("签到时间已超过，不能签到");
        }
    }
}
