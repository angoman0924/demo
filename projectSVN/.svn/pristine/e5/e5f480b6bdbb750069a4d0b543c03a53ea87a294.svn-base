package com.zacx.serivce.line.api.impl;

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.PageInfo;
import com.zacx.serivce.dal.entity.LLine;
import com.zacx.serivce.line.api.LineServiceApi;
import com.zacx.serivce.line.api.dto.LineDTO;
import com.zacx.serivce.line.api.exceptions.LineServiceException;
import com.zacx.serivce.line.service.LineService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * 线路服务api
 * Created by song on 2018/10/3.
 */
@Service
public class LineServiceApiImpl implements LineServiceApi {
    Logger logger=LoggerFactory.getLogger(LineServiceApiImpl.class);
    @Autowired
    private LineService lineService;

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int insert(LineDTO dto) throws LineServiceException {
        logger.info("LineServiceApi.insert,params:{}", JSON.toJSONString(dto));
        LLine record=new LLine();
        BeanUtils.copyProperties(dto,record);
        int r = lineService.insert(record);
        logger.info("r={}",r);
        return r;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int update(LineDTO dto) throws LineServiceException {
        logger.info("LineServiceApi.update,params:{}", JSON.toJSONString(dto));
        LLine record=new LLine();
        BeanUtils.copyProperties(dto,record);
        int r = lineService.update(record);
        logger.info("r={}",r);
        return r;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public int removeListByIds(List<Integer> ids) throws LineServiceException {
        logger.info("LineServiceApi.removeListByIds,params:{}", JSON.toJSONString(ids));
        int r = lineService.removeListByIds(ids);
        logger.info("r={}",r);
        return r;
    }

    @Override
    public PageInfo<LineDTO> getLinePageInfo(LineDTO dto) {
        logger.info("LineServiceApi.getLinePageInfo,params:{}",JSON.toJSONString(dto));

        PageInfo<LLine> linePageInfo = lineService.getLinePageInfo(dto);
        logger.info("linePageInfo_result:{}",JSON.toJSONString(linePageInfo));

        PageInfo<LineDTO> page=new PageInfo<>();
        if(null!=linePageInfo&&null!=linePageInfo.getList()&&!linePageInfo.getList().isEmpty()){
            BeanUtils.copyProperties(linePageInfo,page);
            List<LineDTO> list=new ArrayList<>();
            linePageInfo.getList().forEach(e->{
                LineDTO temp=new LineDTO();
                BeanUtils.copyProperties(e,temp);
                list.add(temp);
            });
            page.setList(list);
        }
        logger.info("page_result:{}",JSON.toJSONString(page));


        return page;
    }
}
