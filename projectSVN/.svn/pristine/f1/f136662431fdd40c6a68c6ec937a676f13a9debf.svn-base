package com.zacx.gateway.driver.controller;

import com.github.pagehelper.PageInfo;
import com.zacx.core.annotation.MethodFlag;
import com.zacx.core.constants.Constants;
import com.zacx.core.enums.BooleanEnum;
import com.zacx.core.enums.Code;
import com.zacx.core.enums.SchedulingMoveApplyStatus;
import com.zacx.core.model.api.ClientInfo;
import com.zacx.core.util.ObjectUtils;
import com.zacx.core.util.StringUtils;
import com.zacx.gateway.base.base.PageResult;
import com.zacx.gateway.base.base.Result;
import com.zacx.gateway.base.util.WebUtils;
import com.zacx.gateway.driver.constants.DriverApiUrl;
import com.zacx.gateway.driver.dto.lines.DriverSignEnter;
import com.zacx.gateway.driver.dto.lines.QuerySchedulingByDriverIdCondition;
import com.zacx.gateway.driver.dto.lines.SchedulingMoveApplyEnter;
import com.zacx.gateway.driver.dto.lines.SchedulingResult;
import com.zacx.serivce.cache.key.RedisKeys;
import com.zacx.serivce.line.api.SchedulingServiceApi;
import com.zacx.serivce.line.api.dto.SchedulingDTO;
import com.zacx.serivce.line.api.dto.SchedulingMoveApplyDTO;
import com.zacx.serivce.service.SerialService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Date;

/**
 * Created by song on 2018/10/5.
 */
@Api(description = "路线模块")
@RestController
@RequestMapping
public class LineController {
    @Autowired
    private SchedulingServiceApi schedulingServiceApi;
    @Autowired
    private SerialService serialService;

    //region 192  查询我的排班
    @MethodFlag
    @ApiOperation(value = "查询我的排班")
    @PostMapping(value = DriverApiUrl.LINE_GET_MY_SCHEDULING_INFO)
    public Result<PageResult<SchedulingResult>> getMySchedulingInfo(@RequestBody QuerySchedulingByDriverIdCondition condition) {
        if (ObjectUtils.isNull(condition)||ObjectUtils.isNull(condition.getDriverId())) {
            return Result.error(Code.getByCode(Code.ERROR_ARGUMENT.getDescription()), Code.ERROR_ARGUMENT.getDescription());
        }

        SchedulingDTO dto=new SchedulingDTO();
        dto.setDriverId(condition.getDriverId());

        if(!ObjectUtils.isNull(condition.getStartTime())){
            dto.setStartTimeStart(condition.getStartTime());
        }
        if(!ObjectUtils.isNull(condition.getEndTime())){
            dto.setStartTimeEnd(condition.getEndTime());
        }
        if(!ObjectUtils.isNull(condition.getStatus())){
            dto.setStatus(condition.getStatus());
        }
        PageInfo<SchedulingDTO> pageInfo = schedulingServiceApi.getSchedulingPageInfo(dto);

        return WebUtils.pageDTOConvert2PageResult(pageInfo,SchedulingResult.class);
    }
    //endregion

    //region 193 班次调班申请
    @MethodFlag   //TODO 免验证需要去掉
    @ApiOperation(value = "班次调班申请")
    @PostMapping(value = DriverApiUrl.LINE_SCHEDULING_MOVE_APPLY)
    public Result schedulingMoveApply(ClientInfo clientInfo,@RequestBody SchedulingMoveApplyEnter enter){
        if (ObjectUtils.isNull(enter)
                ||ObjectUtils.isNull(enter.getUserId())
                ||ObjectUtils.isNull(enter.getUserName())|| !StringUtils.isNotBlank(enter.getUserName().trim())
                ||ObjectUtils.isNull(enter.getSchedulingId())
                ||ObjectUtils.isNull(enter.getType())) {
            return Result.error(Code.getByCode(Code.ERROR_ARGUMENT.getDescription()), Code.ERROR_ARGUMENT.getDescription());
        }

        SchedulingMoveApplyDTO dto=new SchedulingMoveApplyDTO();

        String code = serialService.generateCode(Constants.SCHEDULING_MOVE_APPLY_PREFIX, Constants.SCHEDULING_LENGTH, RedisKeys.LINE_SCHEDULING_MOVE_APPLY_ID_SEQ_KEY);
        if(StringUtils.isBlank(code)){
            return Result.error(Code.ERROR_DB_OPERATE,"编号获取失败");
        }
        dto.setCode(code);
        dto.setCreateAt(new Date());
        dto.setCreateBy(enter.getUserName().trim());
        dto.setDriverId(enter.getUserId());
        dto.setModifyBy(enter.getUserName().trim());
        dto.setModifyAt(new Date());
        dto.setDescribe(enter.getDescribe());
        dto.setSchedulingId(enter.getSchedulingId());
        dto.setStatus(SchedulingMoveApplyStatus.WAITING.getValue());
        dto.setType(enter.getType());
        dto.setUserId(enter.getUserId());


        int i = schedulingServiceApi.schedulingMoveApply(dto);

        if(i==1){
            return Result.success("申请成功");
        }else{
            return Result.error(Code.ERROR_DB_OPERATE,"申请失败");
        }
    }
    //endregion

    //region 194 司机端 扫描签到
    @MethodFlag   //TODO 免验证需要去掉
    @ApiOperation(value = "班次调班申请")
    @PostMapping(value = DriverApiUrl.LINE_DRIVER_SIGN)
    public Result driverSign(ClientInfo clientInfo,@RequestBody DriverSignEnter enter){
        if (ObjectUtils.isNull(enter)
                ||ObjectUtils.isNull(enter.getUserId())
                ||ObjectUtils.isNull(enter.getUserName())|| !StringUtils.isNotBlank(enter.getUserName().trim())
                ||ObjectUtils.isNull(enter.getSchedulingId())) {
            return Result.error(Code.getByCode(Code.ERROR_ARGUMENT.getDescription()), Code.ERROR_ARGUMENT.getDescription());
        }

        SchedulingDTO dto=new SchedulingDTO();
        dto.setId(enter.getSchedulingId());
        dto.setDriverId(enter.getUserId());
        dto.setIsSign(true);
        dto.setSignTime(new Date());
        dto.setModifyAt(new Date());
        dto.setModifyBy(enter.getUserName());

        int update = schedulingServiceApi.driverSign(dto);
        if(1==update){
            return Result.success("签到成功");
        }else{
            return Result.error(Code.ERROR_DB_OPERATE,"签到失败");
        }
    }
    //endregion

}
