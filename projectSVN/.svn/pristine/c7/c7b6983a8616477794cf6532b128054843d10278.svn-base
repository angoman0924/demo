package com.zacx.core.util;

import org.springframework.cglib.beans.BeanMap;
import org.springframework.util.CollectionUtils;

import java.beans.IntrospectionException;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @author Liang Jun
 * @version 1.0
 * @date 2018年05月18日 09:11:21
 **/
public class ObjectUtils {
    /**
     * @author Liang,Jun
     * 根据参数的对象值生成指定类型的值对象
     * @param source 参照对象
     * @param clazz 指定生成对象的类型
     * @return 生成的含值对象
     * @throws RuntimeException
     */
    public static <T> T valueOf(Object source, Class<T> clazz) {
        T instance = null;
        if (source == null) {
            return instance;
        }

        try {
            instance = clazz.newInstance();
            Field[] fields = source.getClass().getDeclaredFields();
            for (Field field : fields) {
                PropertyDescriptor pd = new PropertyDescriptor(field.getName(), source.getClass());
                Method getMethod = pd.getReadMethod();
                Method setMethod = pd.getWriteMethod();

                Object value = getMethod.invoke(source, null);
                if (value != null)
                    setMethod.invoke(instance, value);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        return instance;
    }

    /**
     * @author Liang,Jun
     * 将实体对象转成指定类型的对象
     * @param obj pojo对象
     */
    public static <K, V> Map<K, V> objectToMap(Object obj, Map<K, V> map) {
        if (map == null)
            map = new HashMap<K, V>();
        if (obj == null)
            return map;

        Map bean = BeanMap.create(obj);
        Set<Map.Entry> set = bean.entrySet();

        for (Map.Entry entry : set) {
            map.put((K) entry.getKey(), (V) entry.getValue());
        }
        return map;
    }

    /**
     * @author Liang,Jun
     * 将实体对象转成<String, Object>类型的对象
     * @param obj pojo对象
     */
    public static Map<String, Object> objectToMap(Object obj) {
        return objectToMap(obj, new HashMap<String, Object>());
    }

    /**
     * @author Liang,Jun
     * 将实体对象List转成Map类型的对象
     * 分别以List元素的id属性和该元素作为map对象的名值
     */
    public static <T> Map<?, T> listToMap(List<T> list, String property) {
        Map<Object, T> map = new HashMap<Object, T>();

        try {
            if (!CollectionUtils.isEmpty(list)) {
                PropertyDescriptor pd = new PropertyDescriptor(property, list.get(0).getClass());
                Method getMethod = pd.getReadMethod();

                for (T item : list) {
                    Object key = getMethod.invoke(item);
                    map.put(key, item);
                }
            }
        } catch (IntrospectionException e) {
            String msg = MessageFormat.format("The {0} class NoSuch {1} field or the get/set Method", list.get(0).getClass().getSimpleName(), property);
            throw new RuntimeException(msg);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        return map;
    }
}
